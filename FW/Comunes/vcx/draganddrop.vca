SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340J8622
[CLASS] ccmarco
[CLASSLOC] controles_varios.vcx
[BASECLASS] container
[OBJNAME] draganddropcontainer
[START PROPERTIES]
candropicon = Cur\DragMove.cur
dragthreshold = 8
mousex = 0
mousey = 0
nodropicon = Cur\NoDrop.cur
_memberdata =      819<VFPData><memberdata name="autofit" type="method" display="Autofit"/><memberdata name="nGap" type="property" display="nGap"/><memberdata name="lautofit" type="property" display="lAutofit"/><memberdata name="lautosetup" type="property" display="lAutoSetup"/><memberdata name="samerowasprevious" type="property" display="SameRowAsPrevious" favorites="True"/><memberdata name="nBottomPadding" type="Property" favorites="True"/><memberdata name="candropicon" type="property" display="CanDropIcon" favorites="True"/><memberdata name="dragthreshold" type="property" display="DragThreshold" favorites="True"/><memberdata name="mousex" type="property" display="MouseX"/><memberdata name="mousey" type="property" display="MouseY"/><memberdata name="nodropicon" type="property" display="NoDropIcon" favorites="True"/></VFPData>

Name = "draganddropcontainer"
Shape.Name = "Shape"
lblTitulo.Name = "lblTitulo"
shpLabel.Name = "shpLabel"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
candropicon
dragthreshold number of pixels a user has to move the mouse with the left mouse button down for the drag method to be called.
mousex Stores x coordinate of mouse pointer position
mousey Stores y coordinate of mouse pointer position
nodropicon
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] draganddropcontainer

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340NOKJR
[CLASS] draganddropcontainer
[CLASSLOC] draganddrop.vcx
[BASECLASS] container
[OBJNAME] activexcontainer
[START PROPERTIES]
lallowdrag = .F.
lallowdrop = .F.
_memberdata =     1972<VFPData><memberdata name="autofit" type="method" display="Autofit"/><memberdata name="nGap" type="property" display="nGap"/><memberdata name="lautofit" type="property" display="lAutofit"/><memberdata name="lautosetup" type="property" display="lAutoSetup"/><memberdata name="samerowasprevious" type="property" display="SameRowAsPrevious" favorites="True"/><memberdata name="nupdatefontsize" type="property" display="nUpdateFontSize"/><memberdata name="nupdatefontsize_assign" type="method" display="nUpdateFontSize_Assign"/><memberdata name="nBottomPadding" type="Property" favorites="True"/><memberdata name="hittest" type="method" display="HitTest"/><memberdata name="keydown" type="method" display="KeyDown"/><memberdata name="keyup" type="method" display="KeyUp"/><memberdata name="keypress" type="method" display="KeyPress"/><memberdata name="lallowdrag" type="property" display="lAllowDrag" favorites="True"/><memberdata name="lallowdrop" type="property" display="lAllowDrop" favorites="True"/><memberdata name="afterdrop" type="method" display="AfterDrop"/><memberdata name="selecteditem" type="method" display="SelectedItem"/><memberdata name="setselectitem" type="method" display="SetSelectItem"/><memberdata name="setselected" type="method" display="SetSelected"/><memberdata name="candropicon" type="property" display="CanDropIcon"/><memberdata name="dragthreshold" type="property" display="DragThreshold"/><memberdata name="mousex" type="property" display="MOuseX"/><memberdata name="mousey" type="property" display="MouseY"/><memberdata name="nbottompadding" type="property" favorites="True"/><memberdata name="nodropicon" type="property" display="nOdrOpicon"/><memberdata name="ocontrol" type="property" display="oControl"/><memberdata name="ocontrol_access" type="method" display="oControl_Access"/><memberdata name="classafterdrop" type="method" display="ClassAfterDrop"/><memberdata name="hookafterdrop" type="method" display="HookAfterDrop"/></VFPData>

ocontrol = .NULL.
Name = "activexcontainer"
Shape.Name = "Shape"
lblTitulo.Name = "lblTitulo"
shpLabel.Name = "shpLabel"
[END PROPERTIES]
[START METHODS]
PROCEDURE DragDrop
Lparameters toSource As Object, tnXCoord As Integer, tnYCoord As Integer

Local loTarget As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As activexcontainer Of fw\comunes\vcx\draganddrop.vcx
        If .lAllowDrop
            loTarget = .oControl
            .HookAfterDrop( toSource, tnXCoord, tnYCoord, loTarget, loTarget.DropHighlight )
            .ClassAfterDrop( toSource, tnXCoord, tnYCoord, loTarget, loTarget.DropHighlight )
            loTarget.DropHighlight = Null
        Endif
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
    loTarget = Null
Endtry

ENDPROC
PROCEDURE DragOver
Lparameters oSource, nXCoord, nYCoord, nState

Local loTarget As Object
Local lnxCol As Integer
Local lnyRow As Integer
Local lnLeft As Integer
Local lnTop As Integer
Local lnRelation As Number
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As activexcontainer Of fw\comunes\vcx\draganddrop.vcx
        loTarget = .oControl
        lnRelation = 96 / 1440 && No se de donde sale esta relación
        lnxCol = Mcol( 0, 3 )
        lnyRow = Mrow( 0, 3 )
        lnLeft = Objtoclient( loTarget, 2 )
        lnTop = Objtoclient( loTarget, 1 )
        nXCoord = ( lnxCol - lnLeft ) / lnRelation
        nYCoord = ( lnyRow - lnTop ) / lnRelation
        Do Case
            Case nState = 0 && Enter
                If .lAllowDrop
                    oSource.DragIcon = .CanDropIcon
                    loTarget.DropHighlight = loTarget.HitTest( nXCoord, nYCoord )
                Else
                    If oSource.Parent.lAllowDrag
                        oSource.DragIcon = .NoDropIcon
                    Else
                        oSource.DragIcon = ""
                    Endif
                Endif
            Case nState = 1 && Leave
                oSource.DragIcon = .NoDropIcon
            Case .lAllowDrop
                loTarget.DropHighlight = loTarget.HitTest( nXCoord, nYCoord )
            Otherwise
                If oSource.Parent.lAllowDrag
                    oSource.DragIcon = .NoDropIcon
                Else
                    oSource.DragIcon = ""
                Endif
        Endcase
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
    loTarget = Null
Endtry

ENDPROC
PROCEDURE MouseDown
Lparameters nButton, nShift, nXCoord, nYCoord

With This As activexcontainer Of fw\comunes\vcx\draganddrop.vcx
    .MouseX = nXCoord
    .MouseY = nYCoord
Endwith

ENDPROC
PROCEDURE MouseMove
Lparameters nButton, nShift, nXCoord, nYCoord

Local loTarget As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As activexcontainer Of fw\comunes\vcx\draganddrop.vcx
        If .lAllowDrag
            loTarget = .oControl
            If nButton = 1 && Left Mouse
                If Abs( nXCoord - .MouseX ) > .DragThreshold ;
                        Or Abs( nYCoord - .MouseY ) > .DragThreshold
                    loTarget.Drag()
                Endif
            Endif
        Endif
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loTarget = Null
    loError = Null
Endtry

ENDPROC
PROCEDURE afterdrop
Lparameters toSource As Object, tnXCoord As Integer, tnYCoord As Integer, ;
    toTarget As Object, toItemHighlighted As Object

*!*	Aquí debe programarse las acciones a realizar después que
*!*	se terminó el Drop

*!*	Recibe una referencia al objeto origen, las coordenadas
*!*	donde se produjo el Drop, una referencia al
*!*	objeto destino, y una referancia al item resaltado.


*!*	oSource: Referencia al objeto TreeView/ListView de origen
*!*	nXCoord: Coordenada X del Mouse, relativa al objeto
*!*				TreeView/ListView
*!*	nYCoord: Coordenada Y del Mouse, relativa al objeto
*!*				TreeView/ListView
*!*	oTarget: Referencia al objeto TreeView/ListView de destino
*!*	oItemHighlighted: Referncia al objeto Node/ListItem resaltado.
*!*				Puede ser nulo.

ENDPROC
PROCEDURE autosetup
#INCLUDE "FW\Comunes\Include\Praxis.h"

Try

	With This
		.ZOrder( 1 )
		.BorderWidth 	= 0
		.BackColor 		= .Parent.BackColor
	Endwith

	With This.Shape As Shape
		.Top 			= This.lblTitulo.Height / 2
		.Left 		= 0
		.Height 		= This.Height - ( This.lblTitulo.Height / 2 )
		.Width 		= This.Width
		.BackColor 	= .Parent.BackColor
		.ZOrder( 1 )
		.Anchor = ANCHOR_Top_Absolute + ;
			ANCHOR_Left_Absolute + ;
			ANCHOR_Bottom_Absolute + ;
			ANCHOR_Right_Absolute

	Endwith

	With This.lblTitulo
		.Top 			= 0
		.Left 		= This.Shape.Left + ( .Height / 2 )
		.BackColor 	= .Parent.BackColor
		.DisabledBackColor = Thisform.BackColor
	Endwith

	Local loActiveX As Object
	Do Case
		Case Vartype( This.TreeView ) == "O"
			loActiveX = This.TreeView

		Case Vartype( This.ListView ) == "O"
			loActiveX = This.ListView

		Otherwise
			Error "Tipo de control no soportado"

	Endcase

	With loActiveX As Object
		.Top = This.nTopPadding
		.Left = This.nLeftPadding
		.Height = This.Height - This.nTopPadding - This.nBottomPadding
		.Width = This.Width - This.nLeftPadding - This.nRightPadding
		.Anchor = ANCHOR_Top_Absolute + ;
			ANCHOR_Left_Absolute + ;
			ANCHOR_Bottom_Absolute + ;
			ANCHOR_Right_Absolute
	Endwith

Catch To oErr
	Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
	loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
	loError.Process( oErr )


Finally
	loActiveX = Null

Endtry

ENDPROC
PROCEDURE classafterdrop
Lparameters toSource As Object, tnXCoord As Integer, tnYCoord As Integer, ;
    toTarget As Object, toItemHighlighted As Object

*!* Aquí debe programarse las acciones a realizar después que
*!* se terminó el Drop
*!* Recibe una referencia al objeto origen, las coordenadas
*!* donde se produjo el Drop, una referencia al
*!* objeto destino, y una referancia al item resaltado.

*!* toSource: Referencia al objeto TreeView/ListView de origen
*!* tnXCoord: Coordenada X del Mouse, relativa al objeto TreeView/ListView
*!* tnYCoord: Coordenada Y del Mouse, relativa al objeto TreeView/ListView
*!* toTarget: Referencia al objeto TreeView/ListView de destino
*!* toItemHighlighted: Referncia al objeto Node/ListItem resaltado. Puede ser nulo.
ENDPROC
PROCEDURE hookafterdrop
Lparameters toSource As Object, tnXCoord As Integer, tnYCoord As Integer, ;
    toTarget As Object, toItemHighlighted As Object

*!* Aquí debe programarse las acciones a realizar después que
*!* se terminó el Drop
*!* Recibe una referencia al objeto origen, las coordenadas
*!* donde se produjo el Drop, una referencia al
*!* objeto destino, y una referancia al item resaltado.

*!* toSource: Referencia al objeto TreeView/ListView de origen
*!* tnXCoord: Coordenada X del Mouse, relativa al objeto TreeView/ListView
*!* tnYCoord: Coordenada Y del Mouse, relativa al objeto TreeView/ListView
*!* toTarget: Referencia al objeto TreeView/ListView de destino
*!* toItemHighlighted: Referncia al objeto Node/ListItem resaltado. Puede ser nulo.
ENDPROCPROCEDURE keydown
Lparameters tnkeycode As Integer, tnShift As Integer


ENDPROC
PROCEDURE keypress
Lparameters tnKeyAscii As Integer, tnShiftAltCtrl As Integer


ENDPROC
PROCEDURE keyup
Lparameters tnKeycode As Integer, tnShift As Integer

ENDPROC
PROCEDURE ocontrol_access

Return This.oControl

ENDPROC
PROCEDURE selecteditem

Return null

ENDPROC
PROCEDURE setselected
Lparameters cItemKey As String

ENDPROC
PROCEDURE setselectitem
Lparameters cItemKey As String

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
lallowdrag Indica si el control admite iniciar una acción de Drag and Drop
lallowdrop Indica si el control admite que se suelte un objeto dentro de su ambito
ocontrol Acceso al control que representa
*keydown Ocurre cuando el usuario presiona una tecla mientras un objeto tiene elenfoque. (Para interpretar los caracteresANSI, utilice el evento KeyPress.)
*keyup Ocurre cuando el usuario suelta una tecla mientras un objeto tiene elenfoque. (Para interpretar los caracteresANSI, utilice el evento KeyPress.)
*keypress Ocurre cuando el usuario presiona y suelta una teclaANSI.
*afterdrop Se ejecuta después de haber finalizado el metodo DragDrop
*selecteditem Devuelve el item seleccionado
*setselectitem Seleciona un item del control
*setselected Seleciona un item del control
*ocontrol_access 
*classafterdrop 
*hookafterdrop 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] activexcontainer
[START RESERVED1]
  ..\include\praxis.hÖªùi²: ..\include\foxpro.hÞ«|: ..\include\strings.hæ¬|:[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340NPDJN
[CLASS] activexcontainer
[CLASSLOC] draganddrop.vcx
[BASECLASS] container
[OBJNAME] treeviewcontainer
[START PROPERTIES]
Width = 265
Height = 202
inproc = .F.
oentity = .NULL.
pkfield = 
count = 0
_memberdata =     3508<VFPData><memberdata name="autofit" type="method" display="Autofit"/><memberdata name="nGap" type="property" display="nGap"/><memberdata name="lautofit" type="property" display="lAutofit"/><memberdata name="lautosetup" type="property" display="lAutoSetup"/><memberdata name="samerowasprevious" type="property" display="SameRowAsPrevious" favorites="True"/><memberdata name="fittoparent" type="method" display="FitToParent"/><memberdata name="nupdatefontsize" type="property" display="nUpdateFontSize"/><memberdata name="nupdatefontsize_assign" type="method" display="nUpdateFontSize_Assign"/><memberdata name="nBottomPadding" type="Property" favorites="True"/><memberdata name="addroot" type="method" display="AddRoot"/><memberdata name="addchild" type="method" display="AddChild"/><memberdata name="addlast" type="method" display="AddLast"/><memberdata name="addnext" type="method" display="AddNext"/><memberdata name="addprevious" type="method" display="AddPrevious"/><memberdata name="clear" type="method" display="Clear"/><memberdata name="editlabel" type="method" display="EditLabel"/><memberdata name="newkey" type="method" display="NewKey"/><memberdata name="remove" type="method" display="Remove"/><memberdata name="addimage" type="method" display="AddImage"/><memberdata name="filltree" type="method" display="FillTree"/><memberdata name="treepkfield" type="property" display="TreePKField"/><memberdata name="treeparentpkfield" type="property" display="TreeParentPKField"/><memberdata name="treedescfield" type="property" display="TreeDescField"/><memberdata name="asociatedcursor" type="property" display="AsociatedCursor"/><memberdata name="privatecursor" type="property" display="PrivateCursor"/><memberdata name="pkfield" type="property" display="PKField"/><memberdata name="fillnodes" type="method" display="FillNodes"/><memberdata name="getimage" type="method" display="GetImage"/><memberdata name="imagenrama" type="property" display="ImagenRama"/><memberdata name="imagenraizrama" type="property" display="ImagenRaizRama"/><memberdata name="imagenraizhoja" type="property" display="ImagenRaizHoja"/><memberdata name="imagenhoja" type="property" display="ImagenHoja"/><memberdata name="hookafterfilltree" type="method" display="HookAfterFillTree"/><memberdata name="inproc" type="property" display="InProc"/><memberdata name="imagenraiz" type="property" display="ImagenRaiz"/><memberdata name="hittest" type="method" display="HitTest"/><memberdata name="getlabel" type="method" display="GetLabel"/><memberdata name="oentity" type="property" display="oEntity"/><memberdata name="treecodigofield" type="property" display="TreeCodigoField"/><memberdata name="getimage" type="method" display="GetImage"/><memberdata name="oentity_access" type="method" display="oEntity_Access"/><memberdata name="pkfield" type="property" display="PKField"/><memberdata name="pkfield_access" type="property" display="PKField_Access"/><memberdata name="count" type="property" display="Count"/><memberdata name="count_access" type="property" display="Count_Access"/><memberdata name="hookselecteditem" type="method" display="HookSelectedItem"/><memberdata name="classbeforeselecteditem" type="method" display="ClassBeforeSelectedItem"/><memberdata name="hookbeforeselecteditem" type="method" display="HookBeforeSelectedItem"/><memberdata name="classafterselecteditem" type="method" display="ClassAfterSelectedItem"/><memberdata name="hookafterselecteditem" type="method" display="HookAfterSelectedItem"/></VFPData>

Name = "treeviewcontainer"
Shape.Name = "Shape"
lblTitulo.Name = "lblTitulo"
shpLabel.Name = "shpLabel"
[END PROPERTIES]
[START PROTECTED]
classafterselecteditem
[END PROTECTED]
[START METHODS]
PROCEDURE Destroy

With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
    * Elimino las referencias
    .oEntity = Null
    For Each loNode As MSComctlLib.Node In .Treeview.Nodes
        loNode.Tag = Null
    Endfor
Endwith

ENDPROCPROCEDURE GotFocus

This.TreeView.SetFocus()


ENDPROC
PROCEDURE MouseUp
Lparameters nButton, nShift, nXCoord, nYCoord

ENDPROC
PROCEDURE addchild
Lparameters tcNodeText As String, tcNodeKey As String, tcRelativeNodeKey As String,;
    tnImage As Integer, tnSelectedImage As Integer

#INCLUDE "FW\Comunes\Include\Praxis.h"

Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Local lnRelation As Integer
Local lcKey As String
Local loNode As Object

Try
    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        loNode = Null
        If Empty( tnImage )
            tnImage = 0
        Endif

        If Empty( tnSelectedImage )
            tnSelectedImage = 0
        Endif

        If Empty( tcNodeKey )
            lcKey = .NewKey()
        Else
            lcKey = tcNodeKey
        Endif
        lnRelation = tvw_Child
        loNode = .TreeView.Nodes.Add( tcRelativeNodeKey, lnRelation, lcKey, tcNodeText,;
            tnImage, tnSelectedImage )
        .TreeView.Refresh()
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

Return loNode

ENDPROC
PROCEDURE addimage
Lparameters tcKey As String, tnIndex As Integer, toPicture As Variant

#INCLUDE "FW\Comunes\Include\Praxis.h"

Local lcKey As String
Local loImage As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        loImage = Null
        If Empty( tnIndex )
            tnIndex = This.imageList.ListImages.Count + 1
        Endif

        If Empty( tcKey )
            lcKey = .NewKey()
        Else
            lcKey = tcKey
        Endif
        loImage = .imageList.ListImages.Add( tnIndex, tcKey, toPicture )
        .imageList.Refresh()
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

Return loImage

ENDPROC
PROCEDURE addlast
Lparameters tcNodeText As String, tcNodeKey As String, tcRelativeNodeKey As String,;
    tnImage As Integer, tnSelectedImage As Integer

#INCLUDE "FW\Comunes\Include\Praxis.h"

Local lnRelation As Integer
Local lcKey As String
Local loNode As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try

    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        loNode = Null

        If Empty( tnImage )
            tnImage = 0
        Endif

        If Empty( tnSelectedImage )
            tnSelectedImage = 0
        Endif

        If Empty( tcNodeKey )
            lcKey = .NewKey()
        Else
            lcKey = tcNodeKey
        Endif

        lnRelation = tvw_Last
        loNode = .TreeView.Nodes.Add( tcRelativeNodeKey, lnRelation, lcKey,;
            tcNodeText, tnImage, tnSelectedImage )
        .TreeView.Refresh()
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

Return loNode

ENDPROC
PROCEDURE addnext
#INCLUDE "FW\Comunes\Include\Praxis.h"

Lparameters tcNodeText As String,;
    tcNodeKey As String,;
    tcRelativeNodeKey As String,;
    tnImage As Integer,;
    tnSelectedImage As Integer


Local lnRelation As Integer
Local lcKey As String
Local oNode As Object

Try

    oNode = Null

    If Empty( tnImage )
        tnImage = 0
    Endif

    If Empty( tnSelectedImage )
        tnSelectedImage = 0
    Endif

    If Empty( tcNodeKey )
        lcKey = This.NewKey()
    Else
        lcKey = tcNodeKey
    Endif

    lnRelation = tvw_Next

    oNode = This.TreeView.Nodes.Add( tcRelativeNodeKey,;
        lnRelation,;
        lcKey,;
        tcNodeText,;
        tnImage,;
        tnSelectedImage )

    This.TreeView.Refresh()

Catch To oErr
    Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
	Throw loError

Finally

Endtry

Return oNode

ENDPROC
PROCEDURE addprevious
#INCLUDE "FW\Comunes\Include\Praxis.h"

Lparameters tcNodeText As String,;
    tcNodeKey As String,;
    tcRelativeNodeKey As String,;
    tnImage As Integer,;
    tnSelectedImage As Integer


Local lnRelation As Integer
Local lcKey As String
Local oNode As Object

Try

    oNode = Null

    If Empty( tnImage )
        tnImage = 0
    Endif

    If Empty( tnSelectedImage )
        tnSelectedImage = 0
    Endif

    If Empty( tcNodeKey )
        lcKey = This.NewKey()
    Else
        lcKey = tcNodeKey
    Endif

    lnRelation = tvw_Previous

    oNode = This.TreeView.Nodes.Add( tcRelativeNodeKey,;
        lnRelation,;
        lcKey,;
        tcNodeText,;
        tnImage,;
        tnSelectedImage )

    This.TreeView.Refresh()

Catch To oErr
    Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError

Finally

Endtry

Return oNode

ENDPROC
PROCEDURE addroot
Lparameters tcNodeText As String, tcNodeKey As String,;
    tnImage As Integer, tnSelectedImage As Integer

#INCLUDE "FW\Comunes\Include\Praxis.h"

Local lnRelation As Integer
Local lcKey As String
Local tcRelativeNodeKey As String
Local loNode As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        loNode = Null
        If Empty( tnImage )
            tnImage = 0
        Endif

        If Empty( tnSelectedImage )
            tnSelectedImage = 0
        Endif

        If Empty( tcNodeKey )
            lcKey = This.NewKey()
        Else
            lcKey = tcNodeKey
        Endif
        lnRelation = tvw_First
        loNode = .TreeView.Nodes.Add( lnRelation, lcKey, tcNodeText, tnImage, tnSelectedImage )

        .TreeView.Refresh()

    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

Return loNode

ENDPROC
PROCEDURE classafterinit
With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
    .TreeView.LineStyle = 1  && tvwRootLines
    .TreeView.Style = 7  && tvwTreelinesPlusMinusPictureText
    .TreeView.HotTracking = .T.
    .TreeView.Indentation = 10
Endwith

ENDPROC
PROCEDURE classafterselecteditem
Lparameters toNode As MSComctlLib.Node
ENDPROC
PROCEDURE classbeforeselecteditem
Lparameters tcItemKey As String

Return .T.

ENDPROC
PROCEDURE clear

Local loNode As MSComctlLib.Node
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        For Each loNode In .TreeView.Nodes
            loNode.Tag = Null
        Endfor
        .TreeView.Nodes.Clear()
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loNode = Null
    loError = Null
Endtry

ENDPROC
PROCEDURE count_access
* Recupero la cantidad de nodos del Control
This.Count = This.TreeView.Nodes.Count

Return This.Count

ENDPROC
PROCEDURE editlabel

Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    This.TreeView.StartLabelEdit()
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

ENDPROC
PROCEDURE enabled_assign
Lparameters vNewVal As Boolean

DoDefault( vNewVal )
With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
    .Treeview.Object.Enabled = vNewVal
    .Treeview.Enabled = vNewVal
Endwith

ENDPROC
PROCEDURE filltree
Lparameters tcParentPK As String, tcParentNode As String

Local lbRet As Boolean
Local lcExp As String
Local lcNodeKey As String
Local lcNodeText As String
Local lChangeProc As Boolean
Local llLockScreen As Boolean
Local lnCnt As Integer
Local lObj As Object
Local loNode As MSComctlLib.Node
Local llLockScreen As Boolean
Local lnPK As Number
Local lcCursorName As String
Local lnImage As Number
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try

    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        If ! .InProc
            .InProc = .T.
            llLockScreen = Thisform.LockScreen
            Thisform.LockScreen = .T.
            If Isnull( .TreeView.ImageList )
                .TreeView.ImageList = .ImageList
            Endif

            If Vartype( .oEntity ) # 'O'
                Error [Falta completar la propiedad "oEntity" en ] + .Name
            Endif
            .Clear()
            lChangeProc = .T.
        Endif
        tcParentPK = ifEmpty( tcParentPK, '' )
        tcParentNode = ifEmpty( tcParentNode, '' )

        lbRet = .T.
        If Used( .oEntity.cMainCursorName )
            * Nombre del cursor temporal
            lcCursorName = 'csr' + Sys( 2015 ) + Sys( 2015 )

            * Consulta para seleccionar los hijos del Nodo
            TEXT To lcExp NoShow TextMerge Pretext 15
            select * from <<.oEntity.cMainCursorName>>
            where ! Deleted()
            And Alltrim(<<.oEntity.cTreeParentPKField>>) == '<<Alltrim(tcParentPK)>>'
            ENDTEXT

            If ! Empty( .oEntity.cTreeOrderBy )
                TEXT To lcExp NoShow TextMerge Pretext 15 ADDITIVE
            		order by <<.oEntity.cTreeOrderBy>>
                ENDTEXT
            Endif

            TEXT To lcExp NoShow TextMerge Pretext 15 ADDITIVE
            	into cursor <<lcCursorName>>
            ENDTEXT
            &lcExp

            Select Alias( lcCursorName )
            Locate
            Scan
                * Clave primaria del registro para cargar los nodos hijos
                lcTreePKField = Evaluate( lcCursorName + '.' + .oEntity.cTreePKField )
                * Clave del Nodo
                lcNodeKey = Sys( 2015 ) + Sys( 2015 )
                * Texto del Nodo
                * lcNodeText = Trim( Evaluate( lcCursorName + '.' + .TreeDescField ) )
                lcNodeText = .oEntity.GetLabel( Evaluate( lcCursorName + '.' + .oEntity.cMainCursorPK ) )

                * IdEntidad
                lnPK = Evaluate( lcCursorName + '.' + .oEntity.cMainCursorPK )

                If Empty( tcParentNode )
                    loNode = .AddRoot( lcNodeText, lcNodeKey, 1, 1 )
                Else
                    loNode = .AddChild( lcNodeText, lcNodeKey, tcParentNode, 1, 1 )
                Endif

                * Creo el objeto para agregar en el Tag del Nodo
                lObj = Createobject( 'Empty' )
                AddProperty( lObj, 'EsRaiz', Empty( tcParentNode ) )
                AddProperty( lObj, 'EsHoja', ( loNode.Children = 0 ) )
                AddProperty( lObj, 'EsRama', ( loNode.Children > 0 ) )
                AddProperty( lObj, 'Id', lnPK )
                loNode.Tag = lObj

                lbRet = lbRet And .FillTree( lcTreePKField, lcNodeKey )
                Select Alias( lcCursorName )
                lbRet = lbRet And .HookAfterFillTree( lnPK, lcTreePKField, lcNodeKey )
                Select Alias( lcCursorName )

                * Actualizo los datos del Tag de los campos
                * EsHoja
                * EsRama
                * Despues de ejecutar el FillTree y el HookAfterFillTree
                loNode.Tag.EsHoja = ( loNode.Children = 0 )
                loNode.Tag.EsRama = ( loNode.Children > 0 )

                If loNode.Children > 0
                    loNode.Expanded = .oEntity.lExpandNodeOnInit
                Endif

                * Cambio las imagenes
                lnImage = .GetImage( lnPK, loNode )
                Assert lnImage > 0 Message 'No devolvio imagen'
                loNode.Image = lnImage
                loNode.SelectedImage = lnImage

            Endscan

            Use In Select( Alias( lcCursorName ) )

        Endif

    Endwith

Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    lbRet = .F.
    Throw loError

Finally
    loNode = Null
    lObj = Null

    If lChangeProc
        This.InProc = .F.
        Thisform.LockScreen = llLockScreen
        If This.TreeView.Nodes.Count > 0
            * @TODO Consultar cual es el Nodo que queda selecionado al cargar el Tree
            This.SetSelectItem( This.TreeView.Nodes.Item( 1 ).Key )
        Endif
    Endif
    loError = Null
Endtry

Return lbRet

ENDPROC
PROCEDURE getimage
Lparameters pIdEntity As Integer, pNode As MSComctlLib.Node

Local lnImage As Integer
Local lcKey As String
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
lnImage = -1
Try
    lcKey = This.oEntity.GetImage( pIdEntity, Isnull( pNode.Parent ), pNode.Expanded, ( pNode.Children > 0 ), pNode.Selected )
    lnImage = This.imageList.ListImages.Item( lcKey ).Index
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry
Return lnImage

ENDPROC
PROCEDURE hittest
Lparameters tnx As Integer, tny As Integer

Return This.TreeView.HitTest( tnx, tny )

ENDPROC
PROCEDURE hookafterfilltree
Lparameters nEntityId as Number, cParentPK As String, cParentNode As String

Return .T.
ENDPROC
PROCEDURE hookafterselecteditem
Lparameters toNode As MSComctlLib.Node
ENDPROC
PROCEDURE hookbeforeselecteditem
Lparameters tcItemKey As String

Return .T.

ENDPROC
PROCEDURE hookselecteditem
Lparameters toNode As MSComctlLib.Node

ENDPROC
PROCEDURE newkey

Return Sys( 2015 ) + "_"
ENDPROC
PROCEDURE ocontrol_access

With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
    If Vartype( .oControl ) # 'O'
        .oControl = .TreeView
    Endif
Endwith
Return DoDefault()

ENDPROC
PROCEDURE oentity_access

Return This.oEntity

ENDPROC
PROCEDURE pkfield_access

If Vartype( This.PKField ) # 'C' Or Empty( This.PKField )
    This.PKField = This.oEntity.cMainCursorPK
Endif
Return This.PKField

ENDPROC
PROCEDURE remove
Lparameters eIndex
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    This.TreeView.Nodes.Remove( eIndex )
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

ENDPROC
PROCEDURE selecteditem
Local loItem As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    loItem = This.TreeView.SelectedItem
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loError = Null
Endtry

Return loItem

ENDPROC
PROCEDURE setselectitem
Lparameters tcItemKey As String

Local loNode As MSComctlLib.Node
Local lHasDefault As Logical
Local lnRecno As Integer
Local lcCommand As String
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"

Try
    With This As treeviewcontainer Of fw\comunes\vcx\draganddrop.vcx
        If .ClassBeforeSelectedItem( tcItemKey ) And .HookAfterSelectedItem( tcItemKey )
            loNode = Null
            If ! Empty( tcItemKey )
                loNode = .TreeView.Nodes.Item( tcItemKey )
                With loNode As MSComctlLib.Node
                    .Selected = .T.
                    .EnsureVisible()
                Endwith
            Else
                loNode = Null
                .TreeView.SelectedItem = Null
            Endif
            .HookAfterSelectedItem( loNode )
            .ClassAfterSelectedItem( loNode )
            .TreeView.Refresh()
        Endif
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
    Throw loError
Finally
    loNode = Null
    loError = Null
Endtry

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
3[END RESERVED2]
[START RESERVED3]
inproc
oentity Entidad Asociada
pkfield
count Devuelve la cantidad de Nodos que tiene el Arbol
*addroot Primero. El objeto Node se sitúa antes de todos los demás nodos al mismo nivel que el especificado en el parámetro.
*addchild Hijo. El objeto Node es hijo del nodo especificado en el Parámetro
*addlast Último. El objeto Node se sitúa después de todos los demás nodos al mismo nivel que el especificado en el parámetro. Los objetos Node que se agregan secuencialmente se irán situando detrás del último agregado.
*addnext Siguiente. El objeto Node se sitúa después del especificado en el parámetro.
*addprevious Anterior. El objeto Node se sitúa antes del especificado en el parámetro.
*clear Quita todos los objetos que hay en una colección nodes.
*editlabel Permite editar las etiquetas
*newkey Genera una nueva clave única en forma aleatoria
*remove Quita un miembro específico de una colección.
*addimage Agrega una imagen al control ListImage
*filltree Llena el arbol con lo datos
*hookafterfilltree Se ejecuta luego de agregar cada nodo y sus hijos
*hittest 
*getimage 
*oentity_access 
*pkfield_access 
*count_access 
*hookselecteditem 
*classbeforeselecteditem 
*hookbeforeselecteditem 
*classafterselecteditem 
*hookafterselecteditem 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340NRVEF
[CLASS] prxtreeviewcontrol
[CLASSLOC] prxbase.vcx
[BASECLASS] olecontrol
[OBJNAME] TreeView
[PARENT] treeviewcontainer
[START PROPERTIES]
Top = 24
Left = 12
Height = 168
Width = 240
Name = "TreeView"
[END PROPERTIES]
[START METHODS]
PROCEDURE DblClick
*** ActiveX Control Event ***

This.Parent.DblClick()

ENDPROC
PROCEDURE DragDrop
Lparameters oSource, nXCoord, nYCoord

This.Parent.DragDrop( oSource, nXCoord, nYCoord )


ENDPROC
PROCEDURE DragOver
Lparameters oSource, nXCoord, nYCoord, nState

This.Parent.DragOver( oSource, nXCoord, nYCoord, nState )

ENDPROC
PROCEDURE KeyDown
*** ActiveX Control Event ***
Lparameters keycode, Shift

This.Parent.KeyDown( keycode, Shift )


ENDPROC
PROCEDURE KeyPress
*** ActiveX Control Event ***
Lparameters KeyAscii, nShiftAltCtrl

* Raiseevent( Thisform 'KeyPress', KeyAscii )

This.Parent.KeyPress( KeyAscii, IfEmpty( nShiftAltCtrl, 0 ) )


ENDPROC
PROCEDURE KeyUp
*** ActiveX Control Event ***
Lparameters keycode, Shift

This.Parent.KeyUp( keycode, Shift )


ENDPROC
PROCEDURE MouseDown
*** ActiveX Control Event ***
Lparameters Button, Shift, x, Y

This.Parent.MouseDown( Button, Shift, x, Y )


ENDPROC
PROCEDURE MouseMove
*** ActiveX Control Event ***
Lparameters Button, Shift, x, Y

This.Parent.MouseMove( Button, Shift, x, Y )


ENDPROC
PROCEDURE MouseUp
*** ActiveX Control Event ***
Lparameters Button, Shift, x, Y

This.Parent.MouseUp( Button, Shift, x, Y )


ENDPROC
PROCEDURE Refresh
*** ActiveX Control Method ***

ENDPROC
[END METHODS]
[BINSTART OLE]
CHECKSUM=1640
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=21978
[BINEND OLE2]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340NRVFI
[CLASS] prximagelist
[CLASSLOC] prxbase.vcx
[BASECLASS] olecontrol
[OBJNAME] ImageList
[PARENT] treeviewcontainer
[START PROPERTIES]
Height = 100
Width = 100
Name = "ImageList"
[END PROPERTIES]
[BINSTART OLE]
CHECKSUM=7924
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=21978
[BINEND OLE2]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] treeviewcontainer
[START RESERVED1]
  ..\include\praxis.hÖªùi²: ..\include\foxpro.hÞ«|: ..\include\strings.hæ¬|:[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340OMHVF
[CLASS] activexcontainer
[CLASSLOC] draganddrop.vcx
[BASECLASS] container
[OBJNAME] listviewcontainer
[START PROPERTIES]
Width = 149
Height = 158
_memberdata =      534<VFPData><memberdata name="autofit" type="method" display="Autofit"/><memberdata name="nGap" type="property" display="nGap"/><memberdata name="lautofit" type="property" display="lAutofit"/><memberdata name="samerowasprevious" type="property" display="SameRowAsPrevious" favorites="True"/><memberdata name="nBottomPadding" type="Property" favorites="True"/><memberdata name="add" type="method" display="Add"/><memberdata name="clear" type="method" display="Clear"/><memberdata name="remove" type="method" display="Remove"/></VFPData>

Name = "listviewcontainer"
Shape.Name = "Shape"
lblTitulo.Name = "lblTitulo"
shpLabel.Name = "shpLabel"
[END PROPERTIES]
[START METHODS]
PROCEDURE MouseMove
Lparameters nButton, nShift, nXCoord, nYCoord

With This As listviewcontainer Of v:\sistemaspraxisv2\fw\comunes\vcx\draganddrop.vcx
    If nButton = 1 && Left Mouse
        If Abs(nXCoord - .MouseX) > .DragThreshold ;
                Or Abs( nYCoord - .MouseY ) > .DragThreshold
            .ListView.Drag()
        Endif
    Endif
Endwith

ENDPROC
PROCEDURE add
Lparameters tnIndex, tcKey, tcText, tnIcon, tnSmallIcon

Local lcCommand As String
Local loListItem As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    loListItem = Null
    If Empty( tnIndex )
        lcCommand = ","
    Else
        lcCommand = "tnIndex,"
    Endif

    If Empty( tcKey )
        lcCommand = lcCommand + ","
    Else
        lcCommand = lcCommand + "tcKey,"
    Endif

    If Empty( tcText )
        lcCommand = lcCommand + ","
    Else
        lcCommand = lcCommand + "tcText,"
    Endif

    If Empty( tnIcon )
        lcCommand = lcCommand + ","
    Else
        lcCommand = lcCommand + "tnIcon,"
    Endif

    If Empty( tnSmallIcon )
        lcCommand = lcCommand + ""
    Else
        lcCommand = lcCommand + "tnSmallIcon"
    Endif
    loListItem = This.listView.ListItems.Add( &lcCommand )
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
    loListItem = Null
Endtry

Return loListItem

ENDPROC
PROCEDURE classbeforeinit

With This As listviewcontainer Of fw\comunes\vcx\draganddrop.vcx
    .ListView.View = 2  && lvwList
    .ListView.AllowColumnReorder = .T.
    .ListView.Sorted = .T.
Endwith

Return DoDefault()


ENDPROC
PROCEDURE clear
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    This.ListView.ListItems.Clear()
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
Endtry

ENDPROC
PROCEDURE ocontrol_access

If Vartype( This.oControl )#'O'
    This.oControl = This.ListView
Endif
Return DoDefault()

ENDPROCPROCEDURE remove
Lparameters eIndex
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    This.ListView.ListItems.Remove( eIndex )
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
Endtry

ENDPROC
PROCEDURE selecteditem
Local loItem As Object
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    loItem = This.ListView.SelectedItem
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
Endtry

Return loItem

ENDPROC
PROCEDURE setselected
Lparameters cItemKey As String
Local loItem As MSComctlLib.ListItem
Local loError As ErrorHandler Of "Tools\ErrorHandler\Prg\ErrorHandler.prg"
Try
    loItem = This.listView.ListItems.Item( cItemKey )
    With loItem As MSComctlLib.ListItem
        .Selected = .T.
        .EnsureVisible()
    Endwith
Catch To oErr
    loError = Newobject( "ErrorHandler", "ErrorhandlerPrg\ErrorHandler.prg" )
    loError.Process( oErr )
Finally
    loError = Null
Endtry

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
5[END RESERVED2]
[START RESERVED3]
*add Agrega un objeto ListItem a una colección ListItems de un control ListView y devuelve una referencia al objeto recién creado.
*clear Quita todos los objetos que hay en una colección.
*remove Quita un miembro específico de una colección.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340OSYWM
[CLASS] prxlistviewcontrol
[CLASSLOC] prxbase.vcx
[BASECLASS] olecontrol
[OBJNAME] ListView
[PARENT] listviewcontainer
[START PROPERTIES]
Top = 35
Left = 27
Height = 100
Width = 100
Name = "ListView"
[END PROPERTIES]
[START METHODS]
PROCEDURE DragDrop
Lparameters oSource, nXCoord, nYCoord

This.Parent.DragDrop( oSource, nXCoord, nYCoord )

ENDPROC
PROCEDURE DragOver
Lparameters oSource, nXCoord, nYCoord, nState

This.Parent.DragOver( oSource, nXCoord, nYCoord, nState )

ENDPROC
PROCEDURE KeyDown
*** ActiveX Control Event ***
Lparameters keycode, Shift

This.Parent.KeyDown( keycode, Shift )

ENDPROC
PROCEDURE KeyPress
*** ActiveX Control Event ***
Lparameters keyascii

This.Parent.KeyPress( keyascii )

ENDPROC
PROCEDURE KeyUp
*** ActiveX Control Event ***
Lparameters keycode, Shift

This.Parent.KeyUp( keycode, Shift )

ENDPROC
PROCEDURE MouseDown
*** ActiveX Control Event ***
Lparameters Button, Shift, x, Y

This.Parent.MouseDown( Button, Shift, x, Y )

ENDPROC
PROCEDURE MouseMove
*** ActiveX Control Event ***
Lparameters Button, Shift, x, Y

This.Parent.MouseMove( Button, Shift, x, Y )

ENDPROC
PROCEDURE MouseUp
*** ActiveX Control Event ***
Lparameters Button, Shift, x, Y

This.Parent.MouseUp( Button, Shift, x, Y )

ENDPROC
[END METHODS]
[BINSTART OLE]
CHECKSUM=59113
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=21978
[BINEND OLE2]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340J8622
[CLASS] prximagelist
[CLASSLOC] prxbase.vcx
[BASECLASS] olecontrol
[OBJNAME] ImageListNormal
[PARENT] listviewcontainer
[START PROPERTIES]
Top = 8
Left = 256
Height = 100
Width = 100
Name = "ImageListNormal"
[END PROPERTIES]
[BINSTART OLE]
CHECKSUM=39571
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=21978
[BINEND OLE2]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340OSYXO
[CLASS] prximagelist
[CLASSLOC] prxbase.vcx
[BASECLASS] olecontrol
[OBJNAME] ImageListSmall
[PARENT] listviewcontainer
[START PROPERTIES]
Top = 48
Left = 256
Height = 100
Width = 100
Name = "ImageListSmall"
[END PROPERTIES]
[BINSTART OLE]
CHECKSUM=57068
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=21978
[BINEND OLE2]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2340OSYY9
[CLASS] prximagelist
[CLASSLOC] prxbase.vcx
[BASECLASS] olecontrol
[OBJNAME] ImageListHeaders
[PARENT] listviewcontainer
[START PROPERTIES]
Top = 88
Left = 256
Height = 100
Width = 100
Name = "ImageListHeaders"
[END PROPERTIES]
[BINSTART OLE]
CHECKSUM=47508
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=21978
[BINEND OLE2]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] listviewcontainer
[EOF]
